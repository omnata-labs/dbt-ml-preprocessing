{"results": [{"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_max_abs_scaler"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_max_abs_scaler.csv", "original_file_path": "data\\sql\\data_max_abs_scaler.csv", "name": "data_max_abs_scaler", "resource_type": "seed", "alias": "data_max_abs_scaler", "checksum": {"name": "sha256", "checksum": "7d6160e955f44ae0cd0c891a67852fe8757c8fb72ad5cf915fb71acf73d59539"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.012000799179077148, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.802776Z", "completed_at": "2021-03-10T01:29:11.813776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.813776Z", "completed_at": "2021-03-10T01:29:11.813776Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_k_bins_discretizer"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_k_bins_discretizer.csv", "original_file_path": "data\\sql\\data_k_bins_discretizer.csv", "name": "data_k_bins_discretizer", "resource_type": "seed", "alias": "data_k_bins_discretizer", "checksum": {"name": "sha256", "checksum": "408716f278470c9842f5db51c55d2851632eaabbc02c9e1705272f946af74d47"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.004997730255126953, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.813776Z", "completed_at": "2021-03-10T01:29:11.818774Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.818774Z", "completed_at": "2021-03-10T01:29:11.818774Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_one_hot_encoder"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_one_hot_encoder.csv", "original_file_path": "data\\sql\\data_one_hot_encoder.csv", "name": "data_one_hot_encoder", "resource_type": "seed", "alias": "data_one_hot_encoder", "checksum": {"name": "sha256", "checksum": "9f15d85dc6fb66729812e09a89ef7f309e7dec1fd69b54d4c123e60d95d37743"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.008003473281860352, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.819775Z", "completed_at": "2021-03-10T01:29:11.826776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.826776Z", "completed_at": "2021-03-10T01:29:11.827779Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_label_encoder"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_label_encoder", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_label_encoder.csv", "original_file_path": "data\\sql\\data_label_encoder.csv", "name": "data_label_encoder", "resource_type": "seed", "alias": "data_label_encoder", "checksum": {"name": "sha256", "checksum": "714446c614594a86103a2ead8ef7243ed6d389f6e629e79bc882f17ec961ccfb"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005033254623413086, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.828775Z", "completed_at": "2021-03-10T01:29:11.832812Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.832812Z", "completed_at": "2021-03-10T01:29:11.832812Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_normalizer"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_normalizer", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_normalizer.csv", "original_file_path": "data\\sql\\data_normalizer.csv", "name": "data_normalizer", "resource_type": "seed", "alias": "data_normalizer", "checksum": {"name": "sha256", "checksum": "79603fc9ba213b8bb7b3609a2c62c441d9ff53b046f0a52641de5d2d60246479"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.004957914352416992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.833818Z", "completed_at": "2021-03-10T01:29:11.837776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.838776Z", "completed_at": "2021-03-10T01:29:11.838776Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_quantile_transformer"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_quantile_transformer", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_quantile_transformer.csv", "original_file_path": "data\\sql\\data_quantile_transformer.csv", "name": "data_quantile_transformer", "resource_type": "seed", "alias": "data_quantile_transformer", "checksum": {"name": "sha256", "checksum": "171a3e2b325abb088f3bc2c55f3c36010a1d0abadd89e870d6337435c40a482e"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_transform": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.0060002803802490234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.839809Z", "completed_at": "2021-03-10T01:29:11.843795Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.843795Z", "completed_at": "2021-03-10T01:29:11.843795Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_robust_scaler"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_robust_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_robust_scaler.csv", "original_file_path": "data\\sql\\data_robust_scaler.csv", "name": "data_robust_scaler", "resource_type": "seed", "alias": "data_robust_scaler", "checksum": {"name": "sha256", "checksum": "7d6160e955f44ae0cd0c891a67852fe8757c8fb72ad5cf915fb71acf73d59539"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005049705505371094, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.844776Z", "completed_at": "2021-03-10T01:29:11.848825Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.848825Z", "completed_at": "2021-03-10T01:29:11.848825Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_standard_scaler"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_standard_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_standard_scaler.csv", "original_file_path": "data\\sql\\data_standard_scaler.csv", "name": "data_standard_scaler", "resource_type": "seed", "alias": "data_standard_scaler", "checksum": {"name": "sha256", "checksum": "4197607e52912a5c28c293fb52a4386913ca2f3c96d231b8cae3f9a9ad1f7bab"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_1": "DECIMAL(38,10)", "col_to_scale_2": "DECIMAL(38,10)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.0050048828125, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.849826Z", "completed_at": "2021-03-10T01:29:11.853775Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.854831Z", "completed_at": "2021-03-10T01:29:11.854831Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_k_bins_discretizer_50_bins_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer_50_bins_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_k_bins_discretizer_50_bins_expected.csv", "original_file_path": "data\\sql\\data_k_bins_discretizer_50_bins_expected.csv", "name": "data_k_bins_discretizer_50_bins_expected", "resource_type": "seed", "alias": "data_k_bins_discretizer_50_bins_expected", "checksum": {"name": "sha256", "checksum": "2195536b02b997ba5edd6c926cd484b6e9247482faa39d24ad4020fab69dbc6c"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_bin_1_binned": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.006945371627807617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.855775Z", "completed_at": "2021-03-10T01:29:11.860776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.860776Z", "completed_at": "2021-03-10T01:29:11.860776Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_k_bins_discretizer_default_bins_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer_default_bins_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_k_bins_discretizer_default_bins_expected.csv", "original_file_path": "data\\sql\\data_k_bins_discretizer_default_bins_expected.csv", "name": "data_k_bins_discretizer_default_bins_expected", "resource_type": "seed", "alias": "data_k_bins_discretizer_default_bins_expected", "checksum": {"name": "sha256", "checksum": "6d2587e0db4463b5bf18a2a8796bea667ac04ff07a68a1293849ea225e68bd12"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_bin_1_binned": "DECIMAL(38,6)", "col_to_bin_2_binned": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.00504755973815918, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.861777Z", "completed_at": "2021-03-10T01:29:11.865824Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.865824Z", "completed_at": "2021-03-10T01:29:11.865824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_label_encoder_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_label_encoder_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_label_encoder_expected.csv", "original_file_path": "data\\sql\\data_label_encoder_expected.csv", "name": "data_label_encoder_expected", "resource_type": "seed", "alias": "data_label_encoder_expected", "checksum": {"name": "sha256", "checksum": "dca696a2d460c7a7a1483a22e0ff5eaf7c7e001839dedcbade6fc7e32428e04b"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.004952192306518555, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.866824Z", "completed_at": "2021-03-10T01:29:11.870776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.871776Z", "completed_at": "2021-03-10T01:29:11.871776Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_max_abs_scaler_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_max_abs_scaler_expected.csv", "original_file_path": "data\\sql\\data_max_abs_scaler_expected.csv", "name": "data_max_abs_scaler_expected", "resource_type": "seed", "alias": "data_max_abs_scaler_expected", "checksum": {"name": "sha256", "checksum": "b6ba0b51d6d4dada172c57f7ea682810600f016ddd9de9741c0cb913e1ecbf78"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_scaled": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005999088287353516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.872775Z", "completed_at": "2021-03-10T01:29:11.876775Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.877775Z", "completed_at": "2021-03-10T01:29:11.877775Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_max_abs_scaler_with_column_selection_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler_with_column_selection_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_max_abs_scaler_with_column_selection_expected.csv", "original_file_path": "data\\sql\\data_max_abs_scaler_with_column_selection_expected.csv", "name": "data_max_abs_scaler_with_column_selection_expected", "resource_type": "seed", "alias": "data_max_abs_scaler_with_column_selection_expected", "checksum": {"name": "sha256", "checksum": "9a7a2c45d4ba14be53e95d9df4c5493e0c3d87c9d61ada619d219351a2ba6c4c"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_scaled": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005048990249633789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.877775Z", "completed_at": "2021-03-10T01:29:11.882824Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.882824Z", "completed_at": "2021-03-10T01:29:11.882824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_min_max_scaler"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_min_max_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_min_max_scaler.csv", "original_file_path": "data\\sql\\data_min_max_scaler.csv", "name": "data_min_max_scaler", "resource_type": "seed", "alias": "data_min_max_scaler", "checksum": {"name": "sha256", "checksum": "7d6160e955f44ae0cd0c891a67852fe8757c8fb72ad5cf915fb71acf73d59539"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.004972934722900391, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.883804Z", "completed_at": "2021-03-10T01:29:11.887836Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.887836Z", "completed_at": "2021-03-10T01:29:11.887836Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_min_max_scaler_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_min_max_scaler_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_min_max_scaler_expected.csv", "original_file_path": "data\\sql\\data_min_max_scaler_expected.csv", "name": "data_min_max_scaler_expected", "resource_type": "seed", "alias": "data_min_max_scaler_expected", "checksum": {"name": "sha256", "checksum": "b10fef66bf5e3b219f150d8634dfc9e87e59e71ac925f23219b542fc9fde46df"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_scaled": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005034923553466797, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.888776Z", "completed_at": "2021-03-10T01:29:11.892776Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.893812Z", "completed_at": "2021-03-10T01:29:11.893812Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_min_max_scaler_with_column_selection_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_min_max_scaler_with_column_selection_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_min_max_scaler_with_column_selection_expected.csv", "original_file_path": "data\\sql\\data_min_max_scaler_with_column_selection_expected.csv", "name": "data_min_max_scaler_with_column_selection_expected", "resource_type": "seed", "alias": "data_min_max_scaler_with_column_selection_expected", "checksum": {"name": "sha256", "checksum": "c510b41da8af10f211668ac00b4dbbd1ff8843664956fffc2178143b22c440df"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_scaled": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.0050122737884521484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.894811Z", "completed_at": "2021-03-10T01:29:11.898824Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.898824Z", "completed_at": "2021-03-10T01:29:11.898824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_normalizer_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_normalizer_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_normalizer_expected.csv", "original_file_path": "data\\sql\\data_normalizer_expected.csv", "name": "data_normalizer_expected", "resource_type": "seed", "alias": "data_normalizer_expected", "checksum": {"name": "sha256", "checksum": "77d7aed4489648c937dd306d05d24619158341ead39038183b2b1926280a7b40"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.00498199462890625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.899794Z", "completed_at": "2021-03-10T01:29:11.903777Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.903777Z", "completed_at": "2021-03-10T01:29:11.903777Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_one_hot_encoder_category_selected_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder_category_selected_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_one_hot_encoder_category_selected_expected.csv", "original_file_path": "data\\sql\\data_one_hot_encoder_category_selected_expected.csv", "name": "data_one_hot_encoder_category_selected_expected", "resource_type": "seed", "alias": "data_one_hot_encoder_category_selected_expected", "checksum": {"name": "sha256", "checksum": "dee1a695a7e12728886fd8550264b97d239c0faee0860871fcf09b29bf94c6af"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"is_column_to_encode_A": "boolean", "is_column_to_encode_B": "boolean"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005999088287353516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.904776Z", "completed_at": "2021-03-10T01:29:11.910775Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.910775Z", "completed_at": "2021-03-10T01:29:11.910775Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_one_hot_encoder_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_one_hot_encoder_expected.csv", "original_file_path": "data\\sql\\data_one_hot_encoder_expected.csv", "name": "data_one_hot_encoder_expected", "resource_type": "seed", "alias": "data_one_hot_encoder_expected", "checksum": {"name": "sha256", "checksum": "cf42807b785ef4feaf53739bc479f61e4c0d1063fa339a496d8af432c1a39147"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"is_column_to_encode_A": "boolean", "is_column_to_encode_B": "boolean", "is_column_to_encode_C": "boolean", "is_column_to_encode_D": "boolean"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005021095275878906, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.911775Z", "completed_at": "2021-03-10T01:29:11.915805Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.915805Z", "completed_at": "2021-03-10T01:29:11.915805Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_quantile_transformer_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_quantile_transformer_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_quantile_transformer_expected.csv", "original_file_path": "data\\sql\\data_quantile_transformer_expected.csv", "name": "data_quantile_transformer_expected", "resource_type": "seed", "alias": "data_quantile_transformer_expected", "checksum": {"name": "sha256", "checksum": "2881e3a1debdd2eeccad9a2b503cc4c0f6981681786afa2ac2d87cfe77a4eb98"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_transform_transformed": "DECIMAL(38,6)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.00501704216003418, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.916795Z", "completed_at": "2021-03-10T01:29:11.920834Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.920834Z", "completed_at": "2021-03-10T01:29:11.920834Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_robust_scaler_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_robust_scaler_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_robust_scaler_expected.csv", "original_file_path": "data\\sql\\data_robust_scaler_expected.csv", "name": "data_robust_scaler_expected", "resource_type": "seed", "alias": "data_robust_scaler_expected", "checksum": {"name": "sha256", "checksum": "9768158aeac366bc5194ead4c12af61315c821396ee69a866b686f789fac75e1"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.005011320114135742, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.921812Z", "completed_at": "2021-03-10T01:29:11.925812Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.926824Z", "completed_at": "2021-03-10T01:29:11.926824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "data_standard_scaler_expected"], "unique_id": "seed.dbt_ml_preprocessing_integration_tests.data_standard_scaler_expected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\data_standard_scaler_expected.csv", "original_file_path": "data\\sql\\data_standard_scaler_expected.csv", "name": "data_standard_scaler_expected", "resource_type": "seed", "alias": "data_standard_scaler_expected", "checksum": {"name": "sha256", "checksum": "9834571fd075090099cc42584a7498d6ef7b467ed32b1a09fb5de60806762031"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"col_to_scale_1_scaled": "DECIMAL(38,10)", "col_to_scale_2_scaled": "DECIMAL(38,10)"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.004975795745849609, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.927826Z", "completed_at": "2021-03-10T01:29:11.931800Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.931800Z", "completed_at": "2021-03-10T01:29:11.931800Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ adapter.dispatch('test_quantile_transformer_result_with_tolerance')() }}", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "data_test", "test_quantile_transformer_result_with_tolerance"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.test_quantile_transformer_result_with_tolerance", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "data_test\\test_quantile_transformer_result_with_tolerance.sql", "original_file_path": "tests\\test_quantile_transformer_result_with_tolerance.sql", "name": "test_quantile_transformer_result_with_tolerance", "resource_type": "test", "alias": "test_quantile_transformer_result_with_tolerance", "checksum": {"name": "sha256", "checksum": "44f61c0e23d9a9e48a292199333048817bb3bdb34e3730103ae9b96419f1dfae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.snowflake__test_quantile_transformer_result_with_tolerance"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\tests\\test_quantile_transformer_result_with_tolerance.sql", "deferred": false, "compiled_sql": "\nselect count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\n\n\n\n\nwith a as (\n    select * from test_quantile_transformer\n),\nb as (\n    select * from data_quantile_transformer_expected\n),\njoined as(\n    select round(a.col_to_transform_transformed,6) as actual,\n        round(b.col_to_transform_transformed,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_transform_transformed,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n        *\n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 0.005\n\n\n)"}], "injected_sql": "\nwith dbt__CTE__INTERNAL_test as (\n\n\n\n\nwith a as (\n    select * from test_quantile_transformer\n),\nb as (\n    select * from data_quantile_transformer_expected\n),\njoined as(\n    select round(a.col_to_transform_transformed,6) as actual,\n        round(b.col_to_transform_transformed,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_transform_transformed,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n        *\n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 0.005\n\n\n)select count(*) from dbt__CTE__INTERNAL_test"}, "error": null, "status": null, "execution_time": 0.013002395629882812, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.932776Z", "completed_at": "2021-03-10T01:29:11.944775Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:11.944775Z", "completed_at": "2021-03-10T01:29:11.944775Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.k_bins_discretizer( ref('data_k_bins_discretizer') ,['col_to_bin_1'],n_bins=50) }}\r\n\r\n)\r\n\r\nselect * from data\r\norder by id_col", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_k_bins_discretizer_50_bins"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_k_bins_discretizer_50_bins", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_k_bins_discretizer_50_bins.sql", "original_file_path": "models\\sql\\test_k_bins_discretizer_50_bins.sql", "name": "test_k_bins_discretizer_50_bins", "resource_type": "model", "alias": "test_k_bins_discretizer_50_bins", "checksum": {"name": "sha256", "checksum": "cec4b6b5cb99518b8066b256e266394c87978fdb1ff5c9538c373d011b8ac682"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_k_bins_discretizer"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.k_bins_discretizer"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_k_bins_discretizer_50_bins.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_bin_1_aggregates as(\n        select\n            min(col_to_bin_1) as min_value,\n            max(col_to_bin_1) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_BIN_1\",\n\nsource_table.\"COL_TO_BIN_2\",\n\n\n\n    least(width_bucket(col_to_bin_1,col_to_bin_1_aggregates.min_value,col_to_bin_1_aggregates.max_value,50) - 1,49) as col_to_bin_1_binned\n    \n\nfrom \n  \n      col_to_bin_1_aggregates,\n  \n  DEMO_DB.DBT_MACRO.data_k_bins_discretizer as source_table\n\n\n\n)\n\nselect * from data\norder by id_col", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_bin_1_aggregates as(\n        select\n            min(col_to_bin_1) as min_value,\n            max(col_to_bin_1) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_BIN_1\",\n\nsource_table.\"COL_TO_BIN_2\",\n\n\n\n    least(width_bucket(col_to_bin_1,col_to_bin_1_aggregates.min_value,col_to_bin_1_aggregates.max_value,50) - 1,49) as col_to_bin_1_binned\n    \n\nfrom \n  \n      col_to_bin_1_aggregates,\n  \n  DEMO_DB.DBT_MACRO.data_k_bins_discretizer as source_table\n\n\n\n)\n\nselect * from data\norder by id_col"}, "error": null, "status": null, "execution_time": 0.6776540279388428, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:11.945778Z", "completed_at": "2021-03-10T01:29:12.535987Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:12.536989Z", "completed_at": "2021-03-10T01:29:12.536989Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.k_bins_discretizer( ref('data_k_bins_discretizer') ,['col_to_bin_1','col_to_bin_2']) }}\r\n\r\n)\r\n\r\nselect * from data\r\norder by id_col", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_k_bins_discretizer_default_bins"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_k_bins_discretizer_default_bins", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_k_bins_discretizer_default_bins.sql", "original_file_path": "models\\sql\\test_k_bins_discretizer_default_bins.sql", "name": "test_k_bins_discretizer_default_bins", "resource_type": "model", "alias": "test_k_bins_discretizer_default_bins", "checksum": {"name": "sha256", "checksum": "ee9c25003d36fececf68fc89d1e34ca7ebb8fbebfea67165321c8919c1e2e790"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_k_bins_discretizer"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.k_bins_discretizer"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_k_bins_discretizer_default_bins.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_bin_1_aggregates as(\n        select\n            min(col_to_bin_1) as min_value,\n            max(col_to_bin_1) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n, \n\n    col_to_bin_2_aggregates as(\n        select\n            min(col_to_bin_2) as min_value,\n            max(col_to_bin_2) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_BIN_1\",\n\nsource_table.\"COL_TO_BIN_2\",\n\n\n\n    least(width_bucket(col_to_bin_1,col_to_bin_1_aggregates.min_value,col_to_bin_1_aggregates.max_value,20) - 1,19) as col_to_bin_1_binned\n    , \n\n    least(width_bucket(col_to_bin_2,col_to_bin_2_aggregates.min_value,col_to_bin_2_aggregates.max_value,20) - 1,19) as col_to_bin_2_binned\n    \n\nfrom \n  \n      col_to_bin_1_aggregates,\n  \n      col_to_bin_2_aggregates,\n  \n  DEMO_DB.DBT_MACRO.data_k_bins_discretizer as source_table\n\n\n\n)\n\nselect * from data\norder by id_col", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_bin_1_aggregates as(\n        select\n            min(col_to_bin_1) as min_value,\n            max(col_to_bin_1) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n, \n\n    col_to_bin_2_aggregates as(\n        select\n            min(col_to_bin_2) as min_value,\n            max(col_to_bin_2) as max_value\n        from DEMO_DB.DBT_MACRO.data_k_bins_discretizer\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_BIN_1\",\n\nsource_table.\"COL_TO_BIN_2\",\n\n\n\n    least(width_bucket(col_to_bin_1,col_to_bin_1_aggregates.min_value,col_to_bin_1_aggregates.max_value,20) - 1,19) as col_to_bin_1_binned\n    , \n\n    least(width_bucket(col_to_bin_2,col_to_bin_2_aggregates.min_value,col_to_bin_2_aggregates.max_value,20) - 1,19) as col_to_bin_2_binned\n    \n\nfrom \n  \n      col_to_bin_1_aggregates,\n  \n      col_to_bin_2_aggregates,\n  \n  DEMO_DB.DBT_MACRO.data_k_bins_discretizer as source_table\n\n\n\n)\n\nselect * from data\norder by id_col"}, "error": null, "status": null, "execution_time": 0.4502699375152588, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:12.624470Z", "completed_at": "2021-03-10T01:29:12.986912Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:12.987912Z", "completed_at": "2021-03-10T01:29:12.987912Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.max_abs_scaler( ref('data_max_abs_scaler') ,['col_to_scale']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_max_abs_scaler"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_max_abs_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_max_abs_scaler.sql", "original_file_path": "models\\sql\\test_max_abs_scaler.sql", "name": "test_max_abs_scaler", "resource_type": "model", "alias": "test_max_abs_scaler", "checksum": {"name": "sha256", "checksum": "77aec296ace517932d712fca73ccef9581f0da51c8b36575038db92714f78833"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_max_abs_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.max_abs_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_max_abs_scaler.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            max(abs(col_to_scale)) as max_abs_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    col_to_scale / col_to_scale_aggregates.max_abs_value AS col_to_scale_scaled\n    \n\n\nfrom \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            max(abs(col_to_scale)) as max_abs_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    col_to_scale / col_to_scale_aggregates.max_abs_value AS col_to_scale_scaled\n    \n\n\nfrom \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.4486987590789795, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:13.074702Z", "completed_at": "2021-03-10T01:29:13.438869Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:13.439865Z", "completed_at": "2021-03-10T01:29:13.439865Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.max_abs_scaler( ref('data_max_abs_scaler') ,['col_to_scale'],include_columns=['id_col']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_max_abs_scaler_with_column_selection"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_max_abs_scaler_with_column_selection", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_max_abs_scaler_with_column_selection.sql", "original_file_path": "models\\sql\\test_max_abs_scaler_with_column_selection.sql", "name": "test_max_abs_scaler_with_column_selection", "resource_type": "model", "alias": "test_max_abs_scaler_with_column_selection", "checksum": {"name": "sha256", "checksum": "05a91671570bcbd39df4b54b134228f90b1026bdee70214e504bf304a46e3582"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_max_abs_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.max_abs_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_max_abs_scaler_with_column_selection.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            max(abs(col_to_scale)) as max_abs_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.id_col,\n\n\n    col_to_scale / col_to_scale_aggregates.max_abs_value AS col_to_scale_scaled\n    \n\n\nfrom \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            max(abs(col_to_scale)) as max_abs_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.id_col,\n\n\n    col_to_scale / col_to_scale_aggregates.max_abs_value AS col_to_scale_scaled\n    \n\n\nfrom \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.009995460510253906, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:13.524398Z", "completed_at": "2021-03-10T01:29:13.532361Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:13.532361Z", "completed_at": "2021-03-10T01:29:13.532361Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.min_max_scaler( ref('data_max_abs_scaler') ,['col_to_scale']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_min_max_scaler"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_min_max_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_min_max_scaler.sql", "original_file_path": "models\\sql\\test_min_max_scaler.sql", "name": "test_min_max_scaler", "resource_type": "model", "alias": "test_min_max_scaler", "checksum": {"name": "sha256", "checksum": "a021b70546557fb96422399a0bcb8a0a0cd59cbc9618123fe7b685a442c97d14"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_max_abs_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.min_max_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_min_max_scaler.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            min(col_to_scale) as min_value,\n            max(col_to_scale) as max_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    (col_to_scale - col_to_scale_aggregates.min_value) / (col_to_scale_aggregates.max_value - col_to_scale_aggregates.min_value) AS col_to_scale_scaled\n    \n\n\nfrom  \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            min(col_to_scale) as min_value,\n            max(col_to_scale) as max_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    (col_to_scale - col_to_scale_aggregates.min_value) / (col_to_scale_aggregates.max_value - col_to_scale_aggregates.min_value) AS col_to_scale_scaled\n    \n\n\nfrom  \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.4690382480621338, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:13.534373Z", "completed_at": "2021-03-10T01:29:13.917912Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:13.917912Z", "completed_at": "2021-03-10T01:29:13.917912Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.min_max_scaler( ref('data_max_abs_scaler') ,['col_to_scale'],include_columns=['id_col']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_min_max_scaler_with_column_selection"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_min_max_scaler_with_column_selection", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_min_max_scaler_with_column_selection.sql", "original_file_path": "models\\sql\\test_min_max_scaler_with_column_selection.sql", "name": "test_min_max_scaler_with_column_selection", "resource_type": "model", "alias": "test_min_max_scaler_with_column_selection", "checksum": {"name": "sha256", "checksum": "d385328aa1d9633f192b2e8bd4f3819888aa4c995c7d833352f6be243a2155b3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_max_abs_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.min_max_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_min_max_scaler_with_column_selection.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            min(col_to_scale) as min_value,\n            max(col_to_scale) as max_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.id_col,\n\n\n    (col_to_scale - col_to_scale_aggregates.min_value) / (col_to_scale_aggregates.max_value - col_to_scale_aggregates.min_value) AS col_to_scale_scaled\n    \n\n\nfrom  \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_aggregates as(\n        select\n            min(col_to_scale) as min_value,\n            max(col_to_scale) as max_value\n        from DEMO_DB.DBT_MACRO.data_max_abs_scaler\n    )\n\n\n\nselect \n\nsource_table.id_col,\n\n\n    (col_to_scale - col_to_scale_aggregates.min_value) / (col_to_scale_aggregates.max_value - col_to_scale_aggregates.min_value) AS col_to_scale_scaled\n    \n\n\nfrom  \n    \n        col_to_scale_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_max_abs_scaler as source_table\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.008999347686767578, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:14.003435Z", "completed_at": "2021-03-10T01:29:14.011434Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:14.012435Z", "completed_at": "2021-03-10T01:29:14.012435Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.one_hot_encoder( ref('data_one_hot_encoder') ,'column_to_encode',handle_unknown='ignore') }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_one_hot_encoder"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_one_hot_encoder", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_one_hot_encoder.sql", "original_file_path": "models\\sql\\test_one_hot_encoder.sql", "name": "test_one_hot_encoder", "resource_type": "model", "alias": "test_one_hot_encoder", "checksum": {"name": "sha256", "checksum": "68e5d95f725120f5c4f13b573f2663297b3d33804266e5c9b5f5ede79c25274e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_one_hot_encoder"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.one_hot_encoder"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_one_hot_encoder.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n        \n        \n            \n            \n        \n    \n    \n\n\n\n\n    with binary_output as (\n    select\n                ID_COL,\n                COLUMN_TO_ENCODE,\n            \n                    case \n                        when column_to_encode = 'A' then true \n                        else false\n                    end as is_column_to_encode_A\n                ,\n            \n                    case \n                        when column_to_encode = 'B' then true \n                        else false\n                    end as is_column_to_encode_B\n                ,\n            \n                    case \n                        when column_to_encode = 'C' then true \n                        else false\n                    end as is_column_to_encode_C\n                ,\n            \n                    case \n                        when column_to_encode = 'D' then true \n                        else false\n                    end as is_column_to_encode_D\n                \n    from DEMO_DB.DBT_MACRO.data_one_hot_encoder\n    )\n\n    select * from binary_output\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n        \n        \n            \n            \n        \n    \n    \n\n\n\n\n    with binary_output as (\n    select\n                ID_COL,\n                COLUMN_TO_ENCODE,\n            \n                    case \n                        when column_to_encode = 'A' then true \n                        else false\n                    end as is_column_to_encode_A\n                ,\n            \n                    case \n                        when column_to_encode = 'B' then true \n                        else false\n                    end as is_column_to_encode_B\n                ,\n            \n                    case \n                        when column_to_encode = 'C' then true \n                        else false\n                    end as is_column_to_encode_C\n                ,\n            \n                    case \n                        when column_to_encode = 'D' then true \n                        else false\n                    end as is_column_to_encode_D\n                \n    from DEMO_DB.DBT_MACRO.data_one_hot_encoder\n    )\n\n    select * from binary_output\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.5369341373443604, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:14.012435Z", "completed_at": "2021-03-10T01:29:14.466486Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:14.466486Z", "completed_at": "2021-03-10T01:29:14.466486Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.one_hot_encoder( source_table=ref('data_one_hot_encoder'),\r\n                                            source_column='column_to_encode',\r\n                                            categories=['A','B'],\r\n                                            handle_unknown='ignore') }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_one_hot_encoder_category_selected"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_one_hot_encoder_category_selected", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_one_hot_encoder_category_selected.sql", "original_file_path": "models\\sql\\test_one_hot_encoder_category_selected.sql", "name": "test_one_hot_encoder_category_selected", "resource_type": "model", "alias": "test_one_hot_encoder_category_selected", "checksum": {"name": "sha256", "checksum": "55e316186197d52562803fdfc83c733e31f7b5b9019f4dc5a7d84f6d63df1086"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_one_hot_encoder"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.one_hot_encoder"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_one_hot_encoder_category_selected.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \n    \n\n\n\n\n    with binary_output as (\n    select\n                ID_COL,\n                COLUMN_TO_ENCODE,\n            \n                    case \n                        when column_to_encode = 'A' then true \n                        else false\n                    end as is_column_to_encode_A\n                ,\n            \n                    case \n                        when column_to_encode = 'B' then true \n                        else false\n                    end as is_column_to_encode_B\n                \n    from DEMO_DB.DBT_MACRO.data_one_hot_encoder\n    )\n\n    select * from binary_output\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \n    \n\n\n\n\n    with binary_output as (\n    select\n                ID_COL,\n                COLUMN_TO_ENCODE,\n            \n                    case \n                        when column_to_encode = 'A' then true \n                        else false\n                    end as is_column_to_encode_A\n                ,\n            \n                    case \n                        when column_to_encode = 'B' then true \n                        else false\n                    end as is_column_to_encode_B\n                \n    from DEMO_DB.DBT_MACRO.data_one_hot_encoder\n    )\n\n    select * from binary_output\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.45619916915893555, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:14.550365Z", "completed_at": "2021-03-10T01:29:14.916906Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:14.916906Z", "completed_at": "2021-03-10T01:29:14.916906Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }} -- as a table because Redshift can't handle the equality checker query when it's a view\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.label_encoder( ref('data_label_encoder') ,'col_to_label_encode') }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_label_encoder"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_label_encoder", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_label_encoder.sql", "original_file_path": "models\\sql\\test_label_encoder.sql", "name": "test_label_encoder", "resource_type": "model", "alias": "test_label_encoder", "checksum": {"name": "sha256", "checksum": "894553cc057a60f06933bb647424a10f00ced8c10cd1efcdd61c4e4d31c456a4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_label_encoder"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.label_encoder"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_label_encoder"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_label_encoder.sql", "deferred": false, "compiled_sql": " -- as a table because Redshift can't handle the equality checker query when it's a view\n\nwith data as (\n\n    \n\nwith distinct_values as (\n    select array_agg(distinct col_to_label_encode) within group (order by col_to_label_encode asc) as all_values_array from DEMO_DB.DBT_MACRO.data_label_encoder\n)\nselect \n\nDEMO_DB.DBT_MACRO.data_label_encoder.*,\n\narray_position(col_to_label_encode::variant,all_values_array) as col_to_label_encode_encoded\nfrom distinct_values,DEMO_DB.DBT_MACRO.data_label_encoder\n\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": " -- as a table because Redshift can't handle the equality checker query when it's a view\n\nwith data as (\n\n    \n\nwith distinct_values as (\n    select array_agg(distinct col_to_label_encode) within group (order by col_to_label_encode asc) as all_values_array from DEMO_DB.DBT_MACRO.data_label_encoder\n)\nselect \n\nDEMO_DB.DBT_MACRO.data_label_encoder.*,\n\narray_position(col_to_label_encode::variant,all_values_array) as col_to_label_encode_encoded\nfrom distinct_values,DEMO_DB.DBT_MACRO.data_label_encoder\n\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.009001493453979492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:15.006564Z", "completed_at": "2021-03-10T01:29:15.015566Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:15.015566Z", "completed_at": "2021-03-10T01:29:15.015566Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.normalizer( ref('data_normalizer') ,['col1','col2','col3','col4']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_normalizer"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_normalizer", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_normalizer.sql", "original_file_path": "models\\sql\\test_normalizer.sql", "name": "test_normalizer", "resource_type": "model", "alias": "test_normalizer", "checksum": {"name": "sha256", "checksum": "f4dda1523a423cf2bd0db3b18e1a549b633a82e6421fae932b9d37223b5f9182"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_normalizer"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.normalizer"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_normalizer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_normalizer.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    with magnitude_calcs as (\n    select \n        \n        source_table.\"ID_COL\",\n        \n        source_table.\"COL1\",\n        \n        source_table.\"COL2\",\n        \n        source_table.\"COL3\",\n        \n        source_table.\"COL4\",\n        \n        SQRT(\n            \n            col1*col1\n             + \n            \n            col2*col2\n             + \n            \n            col3*col3\n             + \n            \n            col4*col4\n            \n            \n        ) as magnitude_calc\n    from DEMO_DB.DBT_MACRO.data_normalizer as source_table\n)\nselect \n\ncase magnitude_calc\n    when 0 then 0\n    else col1/magnitude_calc\n    end as col1_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col2/magnitude_calc\n    end as col2_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col3/magnitude_calc\n    end as col3_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col4/magnitude_calc\n    end as col4_normalized\n\n\nfrom magnitude_calcs\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    with magnitude_calcs as (\n    select \n        \n        source_table.\"ID_COL\",\n        \n        source_table.\"COL1\",\n        \n        source_table.\"COL2\",\n        \n        source_table.\"COL3\",\n        \n        source_table.\"COL4\",\n        \n        SQRT(\n            \n            col1*col1\n             + \n            \n            col2*col2\n             + \n            \n            col3*col3\n             + \n            \n            col4*col4\n            \n            \n        ) as magnitude_calc\n    from DEMO_DB.DBT_MACRO.data_normalizer as source_table\n)\nselect \n\ncase magnitude_calc\n    when 0 then 0\n    else col1/magnitude_calc\n    end as col1_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col2/magnitude_calc\n    end as col2_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col3/magnitude_calc\n    end as col3_normalized\n, \n\ncase magnitude_calc\n    when 0 then 0\n    else col4/magnitude_calc\n    end as col4_normalized\n\n\nfrom magnitude_calcs\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.4582641124725342, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:15.016566Z", "completed_at": "2021-03-10T01:29:15.385433Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:15.386429Z", "completed_at": "2021-03-10T01:29:15.386429Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\n-- test model is generated by adapter-specific macro, \r\n-- because the quantile_transformer is not supported by all DBs\r\n{{ adapter.dispatch('quantile_transformer_model_macro')() }}", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_quantile_transformer"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_quantile_transformer", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_quantile_transformer.sql", "original_file_path": "models\\sql\\test_quantile_transformer.sql", "name": "test_quantile_transformer", "resource_type": "model", "alias": "test_quantile_transformer", "checksum": {"name": "sha256", "checksum": "03df31f979e7cdcc9033a8823434af5faafdb956de3e57ee97b037ad31ea5909"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_quantile_transformer"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.snowflake__quantile_transformer_model_macro"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_quantile_transformer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_quantile_transformer.sql", "deferred": false, "compiled_sql": "\n\n-- test model is generated by adapter-specific macro, \n-- because the quantile_transformer is not supported by all DBs\n\nwith data as (\n\n    \nwith quantile_values as(\n  \n    \n    select 0.0 as quantile,percentile_cont(0.0)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.1111111111111111 as quantile,percentile_cont(0.1111111111111111)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.2222222222222222 as quantile,percentile_cont(0.2222222222222222)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.3333333333333333 as quantile,percentile_cont(0.3333333333333333)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.4444444444444444 as quantile,percentile_cont(0.4444444444444444)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.5555555555555556 as quantile,percentile_cont(0.5555555555555556)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.6666666666666666 as quantile,percentile_cont(0.6666666666666666)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.7777777777777778 as quantile,percentile_cont(0.7777777777777778)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.8888888888888888 as quantile,percentile_cont(0.8888888888888888)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 1.0 as quantile,percentile_cont(1.0)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n    \n  \n),\n-- prepare to apply linear interpolation formula\nlinear_interpolation_variables as(\n  select \n    \"ID_COL\", \"COL_TO_TRANSFORM\",\n    col_to_transform as x,\n    (select max(b.quantile) from quantile_values b where b.quantile_value<a.col_to_transform) as y1,\n    (select min(b.quantile) from quantile_values b where b.quantile_value>=a.col_to_transform) as y2,\n    (select max(b.quantile_value) from quantile_values b where b.quantile_value<a.col_to_transform) as x1,\n    (select min(b.quantile_value) from quantile_values b where b.quantile_value>=a.col_to_transform) as x2\n  from DEMO_DB.DBT_MACRO.data_quantile_transformer a\n  where col_to_transform is not null\n  order by col_to_transform\n)\nselect\n\"ID_COL\", \"COL_TO_TRANSFORM\",\ncoalesce(y1 + ((x-x1)/(x2-x1)) * (y2-y1),0) as col_to_transform_transformed\nfrom linear_interpolation_variables\n\n\n\n)\nselect * from data\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- test model is generated by adapter-specific macro, \n-- because the quantile_transformer is not supported by all DBs\n\nwith data as (\n\n    \nwith quantile_values as(\n  \n    \n    select 0.0 as quantile,percentile_cont(0.0)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.1111111111111111 as quantile,percentile_cont(0.1111111111111111)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.2222222222222222 as quantile,percentile_cont(0.2222222222222222)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.3333333333333333 as quantile,percentile_cont(0.3333333333333333)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.4444444444444444 as quantile,percentile_cont(0.4444444444444444)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.5555555555555556 as quantile,percentile_cont(0.5555555555555556)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.6666666666666666 as quantile,percentile_cont(0.6666666666666666)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.7777777777777778 as quantile,percentile_cont(0.7777777777777778)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 0.8888888888888888 as quantile,percentile_cont(0.8888888888888888)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n     union all \n  \n    \n    select 1.0 as quantile,percentile_cont(1.0)  within group (order by col_to_transform)as quantile_value from DEMO_DB.DBT_MACRO.data_quantile_transformer\n    \n  \n),\n-- prepare to apply linear interpolation formula\nlinear_interpolation_variables as(\n  select \n    \"ID_COL\", \"COL_TO_TRANSFORM\",\n    col_to_transform as x,\n    (select max(b.quantile) from quantile_values b where b.quantile_value<a.col_to_transform) as y1,\n    (select min(b.quantile) from quantile_values b where b.quantile_value>=a.col_to_transform) as y2,\n    (select max(b.quantile_value) from quantile_values b where b.quantile_value<a.col_to_transform) as x1,\n    (select min(b.quantile_value) from quantile_values b where b.quantile_value>=a.col_to_transform) as x2\n  from DEMO_DB.DBT_MACRO.data_quantile_transformer a\n  where col_to_transform is not null\n  order by col_to_transform\n)\nselect\n\"ID_COL\", \"COL_TO_TRANSFORM\",\ncoalesce(y1 + ((x-x1)/(x2-x1)) * (y2-y1),0) as col_to_transform_transformed\nfrom linear_interpolation_variables\n\n\n\n)\nselect * from data\n"}, "error": null, "status": null, "execution_time": 0.47204136848449707, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:15.473830Z", "completed_at": "2021-03-10T01:29:15.849177Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:15.849177Z", "completed_at": "2021-03-10T01:29:15.849177Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.robust_scaler( ref('data_robust_scaler') ,['col_to_scale']) }}\r\n\r\n)\r\n\r\nselect * from data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_robust_scaler"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_robust_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_robust_scaler.sql", "original_file_path": "models\\sql\\test_robust_scaler.sql", "name": "test_robust_scaler", "resource_type": "model", "alias": "test_robust_scaler", "checksum": {"name": "sha256", "checksum": "5e86b5d74ba7ab0435e2167027febbebbb0938fafd52abef8ab505b4bffda2e3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_robust_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.robust_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_robust_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_robust_scaler.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    \nwith \n\n    col_to_scale_quartiles as(\n        select\n            percentile_cont(0.25) within group (order by col_to_scale) as first_quartile,\n            percentile_cont(0.75) within group (order by col_to_scale) as third_quartile\n        from DEMO_DB.DBT_MACRO.data_robust_scaler\n    )\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    (col_to_scale / (col_to_scale_quartiles.third_quartile - col_to_scale_quartiles.first_quartile)) as col_to_scale_scaled\n    \n\nfrom \n    \n        col_to_scale_quartiles,\n    \n    DEMO_DB.DBT_MACRO.data_robust_scaler as source_table\n\n\n\n\n)\n\nselect * from data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    \nwith \n\n    col_to_scale_quartiles as(\n        select\n            percentile_cont(0.25) within group (order by col_to_scale) as first_quartile,\n            percentile_cont(0.75) within group (order by col_to_scale) as third_quartile\n        from DEMO_DB.DBT_MACRO.data_robust_scaler\n    )\n\n\nselect \n\nsource_table.\"ID_COL\",\n\nsource_table.\"COL_TO_SCALE\",\n\n\n    (col_to_scale / (col_to_scale_quartiles.third_quartile - col_to_scale_quartiles.first_quartile)) as col_to_scale_scaled\n    \n\nfrom \n    \n        col_to_scale_quartiles,\n    \n    DEMO_DB.DBT_MACRO.data_robust_scaler as source_table\n\n\n\n\n)\n\nselect * from data"}, "error": null, "status": null, "execution_time": 0.45064353942871094, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:15.946916Z", "completed_at": "2021-03-10T01:29:16.310089Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:16.310089Z", "completed_at": "2021-03-10T01:29:16.310089Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nwith data as (\r\n\r\n    {{ dbt_ml_preprocessing.standard_scaler( ref('data_standard_scaler') ,['col_to_scale_1','col_to_scale_2']) }}\r\n\r\n)\r\n\r\nselect id_col,\r\n        col_to_scale_1,\r\n        col_to_scale_2,\r\n        round(col_to_scale_1_scaled,10) as col_to_scale_1_scaled,\r\n        round(col_to_scale_2_scaled,10) as col_to_scale_2_scaled \r\nfrom data", "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "sql", "test_standard_scaler"], "unique_id": "model.dbt_ml_preprocessing_integration_tests.test_standard_scaler", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "sql\\test_standard_scaler.sql", "original_file_path": "models\\sql\\test_standard_scaler.sql", "name": "test_standard_scaler", "resource_type": "model", "alias": "test_standard_scaler", "checksum": {"name": "sha256", "checksum": "cf2dc52382b75eb9e89bd83058d94b69be69bb06fd45d07029ab7ce158697c76"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["data_standard_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing.standard_scaler"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_standard_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\sql\\schema.yml", "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\test_standard_scaler.sql", "deferred": false, "compiled_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_1_aggregates as(\n        select\n            avg(col_to_scale_1) as avg_value,\n            stddev_pop(col_to_scale_1) as stddev_value\n        from DEMO_DB.DBT_MACRO.data_standard_scaler\n    )\n, \n\n    col_to_scale_2_aggregates as(\n        select\n            avg(col_to_scale_2) as avg_value,\n            stddev_pop(col_to_scale_2) as stddev_value\n        from DEMO_DB.DBT_MACRO.data_standard_scaler\n    )\n\n\n\nselect \n    \n        source_table.\"ID_COL\",\n    \n        source_table.\"COL_TO_SCALE_1\",\n    \n        source_table.\"COL_TO_SCALE_2\",\n    \n    \n        (col_to_scale_1 - col_to_scale_1_aggregates.avg_value) / col_to_scale_1_aggregates.stddev_value as col_to_scale_1_scaled\n        , \n    \n        (col_to_scale_2 - col_to_scale_2_aggregates.avg_value) / col_to_scale_2_aggregates.stddev_value as col_to_scale_2_scaled\n        \n    \nfrom \n    \n        col_to_scale_1_aggregates,\n    \n        col_to_scale_2_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_standard_scaler as source_table\n\n\n)\n\nselect id_col,\n        col_to_scale_1,\n        col_to_scale_2,\n        round(col_to_scale_1_scaled,10) as col_to_scale_1_scaled,\n        round(col_to_scale_2_scaled,10) as col_to_scale_2_scaled \nfrom data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith data as (\n\n    -- generate a CTE for each source column, a single row containing the aggregates\nwith \n\n    col_to_scale_1_aggregates as(\n        select\n            avg(col_to_scale_1) as avg_value,\n            stddev_pop(col_to_scale_1) as stddev_value\n        from DEMO_DB.DBT_MACRO.data_standard_scaler\n    )\n, \n\n    col_to_scale_2_aggregates as(\n        select\n            avg(col_to_scale_2) as avg_value,\n            stddev_pop(col_to_scale_2) as stddev_value\n        from DEMO_DB.DBT_MACRO.data_standard_scaler\n    )\n\n\n\nselect \n    \n        source_table.\"ID_COL\",\n    \n        source_table.\"COL_TO_SCALE_1\",\n    \n        source_table.\"COL_TO_SCALE_2\",\n    \n    \n        (col_to_scale_1 - col_to_scale_1_aggregates.avg_value) / col_to_scale_1_aggregates.stddev_value as col_to_scale_1_scaled\n        , \n    \n        (col_to_scale_2 - col_to_scale_2_aggregates.avg_value) / col_to_scale_2_aggregates.stddev_value as col_to_scale_2_scaled\n        \n    \nfrom \n    \n        col_to_scale_1_aggregates,\n    \n        col_to_scale_2_aggregates,\n    \n    DEMO_DB.DBT_MACRO.data_standard_scaler as source_table\n\n\n)\n\nselect id_col,\n        col_to_scale_1,\n        col_to_scale_2,\n        round(col_to_scale_1_scaled,10) as col_to_scale_1_scaled,\n        round(col_to_scale_2_scaled,10) as col_to_scale_2_scaled \nfrom data"}, "error": null, "status": null, "execution_time": 0.4276092052459717, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:16.398552Z", "completed_at": "2021-03-10T01:29:16.731988Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:16.731988Z", "completed_at": "2021-03-10T01:29:16.731988Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_k_bins_discretizer_50_bins_expected')", "model": "{{ ref('test_k_bins_discretizer_50_bins') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_k_bins_discretizer_50_bins_ref_data_k_bins_discretizer_50_bins_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_k_bins_discretizer_50_bins_ref_data_k_bins_discretizer_50_bins_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_k_bins_discretizer_50_bins_e0df257adfdbcb8055d03e33ba889e4b.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_k_bins_discretizer_50_bins_ref_data_k_bins_discretizer_50_bins_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_k_bins_discretizer_50_bins_ref_data_k_bins_discretizer_50_bins_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_k_bins_discretizer_50_bins_expected"], ["test_k_bins_discretizer_50_bins"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer_50_bins_expected", "model.dbt_ml_preprocessing_integration_tests.test_k_bins_discretizer_50_bins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_k_bins_discretizer_50_bins_e0df257adfdbcb8055d03e33ba889e4b.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_k_bins_discretizer_50_bins\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_k_bins_discretizer_50_bins_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_k_bins_discretizer_50_bins\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_k_bins_discretizer_50_bins_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.48029422760009766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:16.829107Z", "completed_at": "2021-03-10T01:29:17.227400Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:17.227400Z", "completed_at": "2021-03-10T01:29:17.227400Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_k_bins_discretizer_default_bins_expected')", "model": "{{ ref('test_k_bins_discretizer_default_bins') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_k_bins_discretizer_default_bins_ref_data_k_bins_discretizer_default_bins_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_k_bins_discretizer_default_bins_ref_data_k_bins_discretizer_default_bins_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_k_bins_discretizer_default_bins_3d76688fc2d41e39e5d2e2a8056b8f61.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_k_bins_discretizer_default_bins_ref_data_k_bins_discretizer_default_bins_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_k_bins_discretizer_default_bins_ref_data_k_bins_discretizer_default_bins_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_k_bins_discretizer_default_bins_expected"], ["test_k_bins_discretizer_default_bins"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_k_bins_discretizer_default_bins_expected", "model.dbt_ml_preprocessing_integration_tests.test_k_bins_discretizer_default_bins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_k_bins_discretizer_default_bins_3d76688fc2d41e39e5d2e2a8056b8f61.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_k_bins_discretizer_default_bins\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_k_bins_discretizer_default_bins_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_k_bins_discretizer_default_bins\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_k_bins_discretizer_default_bins_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_BIN_1\", \"COL_TO_BIN_2\", \"COL_TO_BIN_1_BINNED\", \"COL_TO_BIN_2_BINNED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.4574441909790039, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:17.307461Z", "completed_at": "2021-03-10T01:29:17.676362Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:17.676362Z", "completed_at": "2021-03-10T01:29:17.676362Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_max_abs_scaler_expected')", "model": "{{ ref('test_max_abs_scaler') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_max_abs_scaler_ref_data_max_abs_scaler_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_max_abs_scaler_ref_data_max_abs_scaler_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_max_abs_scaler_b407bf7ecaaa8ca6381fdfdbe9e5be7e.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_max_abs_scaler_ref_data_max_abs_scaler_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_max_abs_scaler_ref_data_max_abs_scaler_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_max_abs_scaler_expected"], ["test_max_abs_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler_expected", "model.dbt_ml_preprocessing_integration_tests.test_max_abs_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_max_abs_scaler_b407bf7ecaaa8ca6381fdfdbe9e5be7e.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_max_abs_scaler\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_max_abs_scaler_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_max_abs_scaler\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_max_abs_scaler_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.4880800247192383, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:17.765904Z", "completed_at": "2021-03-10T01:29:18.138277Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:18.138277Z", "completed_at": "2021-03-10T01:29:18.138277Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_max_abs_scaler_with_column_selection_expected')", "model": "{{ ref('test_max_abs_scaler_with_column_selection') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_max_abs_scaler_with_column_selection_ref_data_max_abs_scaler_with_column_selection_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_max_abs_scaler_with_column_selection_ref_data_max_abs_scaler_with_column_selection_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_max_abs_scaler_with_column_selection_252460a249c7f8146fe4ee22d639a655.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_max_abs_scaler_with_column_selection_ref_data_max_abs_scaler_with_column_selection_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_max_abs_scaler_with_column_selection_ref_data_max_abs_scaler_with_column_selection_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_max_abs_scaler_with_column_selection_expected"], ["test_max_abs_scaler_with_column_selection"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_max_abs_scaler_with_column_selection_expected", "model.dbt_ml_preprocessing_integration_tests.test_max_abs_scaler_with_column_selection"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_max_abs_scaler_with_column_selection_252460a249c7f8146fe4ee22d639a655.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_max_abs_scaler_with_column_selection\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_max_abs_scaler_with_column_selection_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_max_abs_scaler_with_column_selection\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_max_abs_scaler_with_column_selection_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.4450969696044922, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:18.253984Z", "completed_at": "2021-03-10T01:29:18.609326Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:18.610322Z", "completed_at": "2021-03-10T01:29:18.610322Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_equality_with_numeric_tolerance(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "equality_with_numeric_tolerance", "kwargs": {"compare_model": "ref('data_min_max_scaler_expected')", "source_join_column": "id_col", "target_join_column": "id_col", "source_numeric_column_name": "col_to_scale_scaled", "target_numeric_column_name": "col_to_scale_scaled", "percentage_tolerance": 1e-08, "model": "{{ ref('test_min_max_scaler') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "equality_with_numeric_tolerance_test_min_max_scaler_ref_data_min_max_scaler_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.equality_with_numeric_tolerance_test_min_max_scaler_ref_data_min_max_scaler_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\equality_with_numeric_tolerance_test_min_max_scaler_ed09efccac06137b3f16ef9e5d69acf5.sql", "original_file_path": "models\\sql\\schema.yml", "name": "equality_with_numeric_tolerance_test_min_max_scaler_ref_data_min_max_scaler_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "resource_type": "test", "alias": "equality_with_numeric_tolerance_test_min_max_scaler_ref_data_min_max_scaler_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_min_max_scaler_expected"], ["test_min_max_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.test_equality_with_numeric_tolerance"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_min_max_scaler_expected", "model.dbt_ml_preprocessing_integration_tests.test_min_max_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\equality_with_numeric_tolerance_test_min_max_scaler_ed09efccac06137b3f16ef9e5d69acf5.sql", "deferred": false, "compiled_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_min_max_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_min_max_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_scaled,6) as actual,\n        round(b.col_to_scale_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-08\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_min_max_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_min_max_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_scaled,6) as actual,\n        round(b.col_to_scale_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-08\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.46799421310424805, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:18.699081Z", "completed_at": "2021-03-10T01:29:19.080525Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:19.080525Z", "completed_at": "2021-03-10T01:29:19.080525Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_equality_with_numeric_tolerance(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "equality_with_numeric_tolerance", "kwargs": {"compare_model": "ref('data_min_max_scaler_with_column_selection_expected')", "source_join_column": "id_col", "target_join_column": "id_col", "source_numeric_column_name": "col_to_scale_scaled", "target_numeric_column_name": "col_to_scale_scaled", "percentage_tolerance": 1e-08, "model": "{{ ref('test_min_max_scaler_with_column_selection') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_ref_data_min_max_scaler_with_column_selection_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_ref_data_min_max_scaler_with_column_selection_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_bd5c0288e77be49e09e9f6b2e67ec6b7.sql", "original_file_path": "models\\sql\\schema.yml", "name": "equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_ref_data_min_max_scaler_with_column_selection_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "resource_type": "test", "alias": "equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_ref_data_min_max_scaler_with_column_selection_expected___1e_08__id_col__col_to_scale_scaled__id_col__col_to_scale_scaled", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_min_max_scaler_with_column_selection_expected"], ["test_min_max_scaler_with_column_selection"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.test_equality_with_numeric_tolerance"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_min_max_scaler_with_column_selection_expected", "model.dbt_ml_preprocessing_integration_tests.test_min_max_scaler_with_column_selection"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\equality_with_numeric_tolerance_test_min_max_scaler_with_column_selection_bd5c0288e77be49e09e9f6b2e67ec6b7.sql", "deferred": false, "compiled_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_min_max_scaler_with_column_selection\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_min_max_scaler_with_column_selection_expected\n),\njoined as(\n    select round(a.col_to_scale_scaled,6) as actual,\n        round(b.col_to_scale_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-08\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_min_max_scaler_with_column_selection\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_min_max_scaler_with_column_selection_expected\n),\njoined as(\n    select round(a.col_to_scale_scaled,6) as actual,\n        round(b.col_to_scale_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-08\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.46148109436035156, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:19.168076Z", "completed_at": "2021-03-10T01:29:19.540021Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:19.540021Z", "completed_at": "2021-03-10T01:29:19.540021Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_one_hot_encoder_expected')", "model": "{{ ref('test_one_hot_encoder') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_one_hot_encoder_ref_data_one_hot_encoder_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_one_hot_encoder_ref_data_one_hot_encoder_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_one_hot_encoder_da2ad043f2a5e4a91a39f0341dd1f768.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_one_hot_encoder_ref_data_one_hot_encoder_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_one_hot_encoder_ref_data_one_hot_encoder_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_one_hot_encoder_expected"], ["test_one_hot_encoder"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder_expected", "model.dbt_ml_preprocessing_integration_tests.test_one_hot_encoder"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_one_hot_encoder_da2ad043f2a5e4a91a39f0341dd1f768.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_one_hot_encoder\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_one_hot_encoder_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_one_hot_encoder\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_one_hot_encoder_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\", \"IS_COLUMN_TO_ENCODE_C\", \"IS_COLUMN_TO_ENCODE_D\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.4656033515930176, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:19.629515Z", "completed_at": "2021-03-10T01:29:20.015510Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:20.016551Z", "completed_at": "2021-03-10T01:29:20.016551Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_one_hot_encoder_category_selected_expected')", "model": "{{ ref('test_one_hot_encoder_category_selected') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_one_hot_encoder_category_selected_ref_data_one_hot_encoder_category_selected_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_one_hot_encoder_category_selected_ref_data_one_hot_encoder_category_selected_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_one_hot_encoder_category_selected_9cd22166ba568c5d87e33592ffe7f657.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_one_hot_encoder_category_selected_ref_data_one_hot_encoder_category_selected_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_one_hot_encoder_category_selected_ref_data_one_hot_encoder_category_selected_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_one_hot_encoder_category_selected_expected"], ["test_one_hot_encoder_category_selected"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_one_hot_encoder_category_selected_expected", "model.dbt_ml_preprocessing_integration_tests.test_one_hot_encoder_category_selected"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_one_hot_encoder_category_selected_9cd22166ba568c5d87e33592ffe7f657.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_one_hot_encoder_category_selected\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_one_hot_encoder_category_selected_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_one_hot_encoder_category_selected\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_one_hot_encoder_category_selected_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COLUMN_TO_ENCODE\", \"IS_COLUMN_TO_ENCODE_A\", \"IS_COLUMN_TO_ENCODE_B\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.45284366607666016, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:20.096113Z", "completed_at": "2021-03-10T01:29:20.457595Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:20.457595Z", "completed_at": "2021-03-10T01:29:20.457595Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_label_encoder_expected')", "model": "{{ ref('test_label_encoder') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_label_encoder_expected"], ["test_label_encoder"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_label_encoder_expected", "model.dbt_ml_preprocessing_integration_tests.test_label_encoder"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_label_encoder_ref_data_label_encoder_expected_.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_label_encoder\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_label_encoder_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_label_encoder\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_label_encoder_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_LABEL_ENCODE\", \"COL_TO_LABEL_ENCODE_ENCODED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.47356557846069336, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:20.548958Z", "completed_at": "2021-03-10T01:29:20.927908Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:20.927908Z", "completed_at": "2021-03-10T01:29:20.927908Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_normalizer_expected')", "model": "{{ ref('test_normalizer') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_normalizer_expected"], ["test_normalizer"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_normalizer_expected", "model.dbt_ml_preprocessing_integration_tests.test_normalizer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_normalizer_ref_data_normalizer_expected_.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_normalizer\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_normalizer_expected\n\n),\n\na_minus_b as (\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from a\n    \n  \n\n    except\n\n\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from b\n    \n  \n\n    except\n\n\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_normalizer\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_normalizer_expected\n\n),\n\na_minus_b as (\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from a\n    \n  \n\n    except\n\n\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from b\n    \n  \n\n    except\n\n\n\n    select \"COL1_NORMALIZED\", \"COL2_NORMALIZED\", \"COL3_NORMALIZED\", \"COL4_NORMALIZED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.484250545501709, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:21.022506Z", "completed_at": "2021-03-10T01:29:21.418775Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:21.419792Z", "completed_at": "2021-03-10T01:29:21.419792Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('data_robust_scaler_expected')", "model": "{{ ref('test_robust_scaler') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_.sql", "original_file_path": "models\\sql\\schema.yml", "name": "dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_", "resource_type": "test", "alias": "dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_robust_scaler_expected"], ["test_robust_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_robust_scaler_expected", "model.dbt_ml_preprocessing_integration_tests.test_robust_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\dbt_utils_equality_test_robust_scaler_ref_data_robust_scaler_expected_.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_robust_scaler\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_robust_scaler_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\n\nwith a as (\n\n    select * from DEMO_DB.DBT_MACRO.test_robust_scaler\n\n),\n\nb as (\n\n    select * from DEMO_DB.DBT_MACRO.data_robust_scaler_expected\n\n),\n\na_minus_b as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n\n),\n\nb_minus_a as (\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from b\n    \n  \n\n    except\n\n\n\n    select \"ID_COL\", \"COL_TO_SCALE\", \"COL_TO_SCALE_SCALED\" from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.6534061431884766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:21.507756Z", "completed_at": "2021-03-10T01:29:22.068824Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:22.068824Z", "completed_at": "2021-03-10T01:29:22.068824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_equality_with_numeric_tolerance(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "equality_with_numeric_tolerance", "kwargs": {"compare_model": "ref('data_standard_scaler_expected')", "source_join_column": "id_col", "target_join_column": "id_col", "source_numeric_column_name": "col_to_scale_1_scaled", "target_numeric_column_name": "col_to_scale_1_scaled", "percentage_tolerance": 1e-07, "model": "{{ ref('test_standard_scaler') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_1_scaled__id_col__col_to_scale_1_scaled"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_1_scaled__id_col__col_to_scale_1_scaled", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\equality_with_numeric_tolerance_test_standard_scaler_c53fa90e2ca67500a6fbe4a5472766fa.sql", "original_file_path": "models\\sql\\schema.yml", "name": "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_1_scaled__id_col__col_to_scale_1_scaled", "resource_type": "test", "alias": "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_1_scaled__id_col__col_to_scale_1_scaled", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_standard_scaler_expected"], ["test_standard_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.test_equality_with_numeric_tolerance"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_standard_scaler_expected", "model.dbt_ml_preprocessing_integration_tests.test_standard_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\equality_with_numeric_tolerance_test_standard_scaler_c53fa90e2ca67500a6fbe4a5472766fa.sql", "deferred": false, "compiled_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_standard_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_standard_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_1_scaled,6) as actual,\n        round(b.col_to_scale_1_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_1_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-07\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_standard_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_standard_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_1_scaled,6) as actual,\n        round(b.col_to_scale_1_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_1_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-07\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.6410572528839111, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:22.160163Z", "completed_at": "2021-03-10T01:29:22.711457Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:22.712455Z", "completed_at": "2021-03-10T01:29:22.712455Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_equality_with_numeric_tolerance(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "equality_with_numeric_tolerance", "kwargs": {"compare_model": "ref('data_standard_scaler_expected')", "source_join_column": "id_col", "target_join_column": "id_col", "source_numeric_column_name": "col_to_scale_2_scaled", "target_numeric_column_name": "col_to_scale_2_scaled", "percentage_tolerance": 1e-07, "model": "{{ ref('test_standard_scaler') }}"}}, "compiled": true, "database": "DEMO_DB", "schema": "DBT_MACRO", "fqn": ["dbt_ml_preprocessing_integration_tests", "schema_test", "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_2_scaled__id_col__col_to_scale_2_scaled"], "unique_id": "test.dbt_ml_preprocessing_integration_tests.equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_2_scaled__id_col__col_to_scale_2_scaled", "package_name": "dbt_ml_preprocessing_integration_tests", "root_path": "C:\\Users\\james\\Documents\\GitHub\\dbt-ml-preprocessing\\integration_tests", "path": "schema_test\\equality_with_numeric_tolerance_test_standard_scaler_26654e3e50caa21255248d1fd99c9665.sql", "original_file_path": "models\\sql\\schema.yml", "name": "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_2_scaled__id_col__col_to_scale_2_scaled", "resource_type": "test", "alias": "equality_with_numeric_tolerance_test_standard_scaler_ref_data_standard_scaler_expected___1e_07__id_col__col_to_scale_2_scaled__id_col__col_to_scale_2_scaled", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["data_standard_scaler_expected"], ["test_standard_scaler"]], "sources": [], "depends_on": {"macros": ["macro.dbt_ml_preprocessing_integration_tests.test_equality_with_numeric_tolerance"], "nodes": ["seed.dbt_ml_preprocessing_integration_tests.data_standard_scaler_expected", "model.dbt_ml_preprocessing_integration_tests.test_standard_scaler"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\compiled\\dbt_ml_preprocessing_integration_tests\\models\\sql\\schema.yml\\schema_test\\equality_with_numeric_tolerance_test_standard_scaler_26654e3e50caa21255248d1fd99c9665.sql", "deferred": false, "compiled_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_standard_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_standard_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_2_scaled,6) as actual,\n        round(b.col_to_scale_2_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_2_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-07\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith a as (\n    select * from DEMO_DB.DBT_MACRO.test_standard_scaler\n),\nb as (\n    select * from DEMO_DB.DBT_MACRO.data_standard_scaler_expected\n),\njoined as(\n    select round(a.col_to_scale_2_scaled,6) as actual,\n        round(b.col_to_scale_2_scaled,6) as expected,\n        abs(actual-expected) as difference,\n        iff(difference>0,difference/b.col_to_scale_2_scaled,0)*100 as percent_difference\n  from a\n  join b on a.id_col=b.id_col\n  )\nselect \n       count(*) \n       \nfrom joined\n-- The reason we tolerate tiny differences here is because of the floating point arithmetic, \n-- the values do not end up exactly the same as those output from python\nwhere percent_difference > 1e-07\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.4758579730987549, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-03-10T01:29:22.801220Z", "completed_at": "2021-03-10T01:29:23.191629Z"}, {"name": "execute", "started_at": "2021-03-10T01:29:23.191629Z", "completed_at": "2021-03-10T01:29:23.191629Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-03-10T01:29:23.279022Z", "elapsed_time": 12.281227827072144}